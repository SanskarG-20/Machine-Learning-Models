# -*- coding: utf-8 -*-
"""sentiment-twiiter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oiUYUBUhUXXD5kJj0Er_yFegmllBvIsQ
"""

! pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#API to fetch the dataset
!kaggle datasets download -d kazanova/sentiment140

#extracting the compressed dataset zip
from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stopwords
print(stopwords.words('english'))

"""**Data Processing**"""

twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding='ISO-8859-1')

#checking the total rows and columns
twitter_data.shape

#printing the first 10 rows of the dataset
twitter_data.head(10)

# renaming the column
column_names=['target','id','date','flag','user','text']
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=column_names, encoding='ISO-8859-1')
twitter_data.head(10)

twitter_data.shape

#couting the null values
twitter_data.isnull().sum()

#checking the distribution of the target column
twitter_data['target'].value_counts()

"""**Converting the target 4 to 1**"""

twitter_data.replace({'target': {4: 1}}, inplace=True)
twitter_data

twitter_data['target'].value_counts()

"""**0 ----> Negative Tweet**

**1 ----> Positive Tweet**

**Stemming** : A process we do in order to reduce a word to its root word.

Eg: "tweeting" -> "tweet"
"""

port_stem=PorterStemmer()

def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content']=twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

X=twitter_data['stemmed_content'].values
Y=twitter_data['target'].values

print(X)

print(Y)

"""**Splitting the data into training data and testing data**"""

X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.4, stratify=Y, random_state=2)

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

print(X_train)

print(X_test)

#converting textual data to numerical data
vectorizer=TfidfVectorizer()

X_train=vectorizer.fit_transform(X_train)
X_test=vectorizer.transform(X_test)

print(X_test)

print(X_train)

"""**Training the Machine Learning Model**

Logistic Regression
"""

model=LogisticRegression(max_iter=1000)
model.fit(X_train, Y_train)

"""**Model Evaluation**

Accuracy Score
"""

#accuracy score on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(Y_train, X_train_prediction)

print("Accuracy Score of training data: ", training_data_accuracy)

#accuracy score on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(Y_test, X_test_prediction)

print("Accuracy Score of test data: ", test_data_accuracy)

"""**Model Accuracy = 77.6%**

Saving the trained model
"""

import pickle

filename='Trained_model.sav'
pickle.dump(model, open(filename, 'wb'))

"""**Using the saved model for future predictions**"""

#loading the saved model
loaded_model=pickle.load(open('/content/Trained_model.sav', 'rb'))

X_new = X_test[19857]
print(Y_test[19857])

prediction = loaded_model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The tweet is Negative')
else:
  print('The tweet is Positive')

with open('Trained_model.sav', 'rb') as model_file:
    model = pickle.load(model_file)

with open('vectorizer.sav', 'rb') as vectorizer_file:
    vectorizer = pickle.load(vectorizer_file)

filename_vectorizer = 'vectorizer.sav'
pickle.dump(vectorizer, open(filename_vectorizer, 'wb'))

# Define stemming function (same as in training)
def stemming(content):
    ps = PorterStemmer()
    stemmed_content = re.sub('[^a-zA-Z]', ' ', content)  # Remove non-alphabetic characters
    stemmed_content = stemmed_content.lower()  # Convert to lowercase
    stemmed_content = stemmed_content.split()  # Tokenize
    stemmed_content = [ps.stem(word) for word in stemmed_content if word not in stopwords.words('english')]  # Stem and remove stopwords
    stemmed_content = ' '.join(stemmed_content)  # Join back to string
    return stemmed_content

# Function to predict sentiment of a single tweet
def predict_sentiment(tweet):
    # Preprocess the tweet
    processed_tweet = stemming(tweet)
    # Transform the tweet using the same TF-IDF vectorizer
    tweet_vector = vectorizer.transform([processed_tweet])
    # Predict using the loaded model
    prediction = model.predict(tweet_vector)
    # Return sentiment
    return 'Positive' if prediction[0] == 1 else 'Negative'

# Main execution
if __name__ == "__main__":
    # Get user input
    tweet = input("Enter a tweet to analyze sentiment: ")
    # Predict sentiment
    sentiment = predict_sentiment(tweet)
    print(f"The sentiment of the tweet is: {sentiment}")